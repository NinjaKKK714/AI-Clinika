import React, { useState, useEffect, useRef } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity, 
  Animated,
  TextInput,
  Dimensions
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import LocalIcons from '../components/LocalIcons';

const { width } = Dimensions.get('window');

export default function RequestsScreen({ navigation }) {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDateFilter, setSelectedDateFilter] = useState('all');
  const [showSearch, setShowSearch] = useState(false);
  
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;

  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  const dateFilters = [
    { id: 'all', name: '–í—Å–µ' },
    { id: 'today', name: '–°–µ–≥–æ–¥–Ω—è' },
    { id: 'week', name: '–ù–µ–¥–µ–ª—è' },
    { id: 'month', name: '–ú–µ—Å—è—Ü' },
    { id: 'year', name: '–ì–æ–¥' },
  ];

  const requests = [
    {
      id: 1,
      date: '15.12.2024',
      time: '14:30',
      userQuery: '–ë–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—à–Ω–∏—Ç —É–∂–µ 3 –¥–Ω—è',
      aiResponse: '–ü–æ –æ–ø–∏—Å–∞–Ω–Ω—ã–º —Å–∏–º–ø—Ç–æ–º–∞–º –≤–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –º–∏–≥—Ä–µ–Ω—å –∏–ª–∏ –ø–∏—â–µ–≤–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–µ–≤—Ä–æ–ª–æ–≥—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.',
      symptoms: ['–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å', '–¢–æ—à–Ω–æ—Ç–∞', '–°–ª–∞–±–æ—Å—Ç—å'],
      category: '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è',
      status: 'completed'
    },
    {
      id: 2,
      date: '14.12.2024',
      time: '09:15',
      userQuery: '–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∏ –∑—É–¥ –Ω–∞ –∫–æ–∂–µ —Ä—É–∫',
      aiResponse: '–°–∏–º–ø—Ç–æ–º—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–ª–∏ –¥–µ—Ä–º–∞—Ç–∏—Ç. –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–æ–º.',
      symptoms: ['–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∫–æ–∂–∏', '–ó—É–¥', '–°—ã–ø—å'],
      category: '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è',
      status: 'completed'
    },
    {
      id: 3,
      date: '13.12.2024',
      time: '16:45',
      userQuery: '–ë–æ–ª–∏ –≤ –≥—Ä—É–¥–∏ –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ',
      aiResponse: '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–∞—Ä–¥–∏–æ–ª–æ–≥—É.',
      symptoms: ['–ë–æ–ª—å –≤ –≥—Ä—É–¥–∏', '–û–¥—ã—à–∫–∞', '–£—Å—Ç–∞–ª–æ—Å—Ç—å'],
      category: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è',
      status: 'completed'
    },
    {
      id: 4,
      date: '12.12.2024',
      time: '11:20',
      userQuery: '–ë–æ–ª–∏ –≤ —Å–ø–∏–Ω–µ –ø–æ—Å–ª–µ –ø–æ–¥–Ω—è—Ç–∏—è —Ç—è–∂–µ—Å—Ç–µ–π',
      aiResponse: '–í–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –º—ã—à—Ü –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ä—Ç–æ–ø–µ–¥–∞.',
      symptoms: ['–ë–æ–ª—å –≤ —Å–ø–∏–Ω–µ', '–°–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π'],
      category: '–û—Ä—Ç–æ–ø–µ–¥–∏—è',
      status: 'completed'
    },
    {
      id: 5,
      date: '11.12.2024',
      time: '13:10',
      userQuery: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      aiResponse: '–°–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.',
      symptoms: ['–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', '–†–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
      category: '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è',
      status: 'completed'
    },
    {
      id: 6,
      date: '10.12.2024',
      time: '08:30',
      userQuery: '–ë–æ–ª–∏ –≤ –∑—É–±–∞—Ö –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ö–æ–ª–æ–¥–Ω–æ–º—É',
      aiResponse: '–í–æ–∑–º–æ–∂–Ω–æ –∫–∞—Ä–∏–µ—Å –∏–ª–∏ –≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ –Ω–µ—Ä–≤–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞.',
      symptoms: ['–ó—É–±–Ω–∞—è –±–æ–ª—å', '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–î–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç'],
      category: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
      status: 'completed'
    },
  ];

  const filteredRequests = requests
    .filter(request => 
      searchQuery === '' || 
      request.userQuery.toLowerCase().includes(searchQuery.toLowerCase()) ||
      request.aiResponse.toLowerCase().includes(searchQuery.toLowerCase()) ||
      request.symptoms.some(symptom => 
        symptom.toLowerCase().includes(searchQuery.toLowerCase())
      )
    )
    .filter(request => {
      if (selectedDateFilter === 'all') return true;
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
      return true;
    });

  const renderRequestCard = (request) => (
    <TouchableOpacity 
      key={request.id} 
      style={styles.requestCard}
      onPress={() => navigation.navigate('RequestDetail', { request })}
    >
      <View style={styles.requestHeader}>
        <View style={styles.requestInfo}>
          <Text style={styles.requestDate}>{request.date} –≤ {request.time}</Text>
          <View style={styles.categoryContainer}>
            <LinearGradient colors={['#0863a7', '#074393']} style={styles.categoryBadge}>
              <Text style={styles.categoryText}>{request.category}</Text>
            </LinearGradient>
          </View>
        </View>
        <View style={styles.statusContainer}>
          <View style={styles.statusDot} />
        </View>
      </View>

      <View style={styles.requestContent}>
        <Text style={styles.requestTitle}>–í–∞—à –∑–∞–ø—Ä–æ—Å:</Text>
        <Text style={styles.requestQuery} numberOfLines={2}>
          {request.userQuery}
        </Text>
        
        <Text style={styles.requestTitle}>–û—Ç–≤–µ—Ç –ò–ò:</Text>
        <Text style={styles.aiResponse} numberOfLines={3}>
          {request.aiResponse}
        </Text>

        <View style={styles.symptomsContainer}>
          <Text style={styles.symptomsTitle}>–°–∏–º–ø—Ç–æ–º—ã:</Text>
          <View style={styles.symptomsList}>
            {request.symptoms.map((symptom, index) => (
              <View key={index} style={styles.symptomTag}>
                <Text style={styles.symptomText}>{symptom}</Text>
              </View>
            ))}
          </View>
        </View>
      </View>

      <View style={styles.requestFooter}>
        <TouchableOpacity style={styles.viewDetailsButton}>
          <Text style={styles.viewDetailsText}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Text>
          {LocalIcons.arrow({ size: 16, color: "#0863a7" })}
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.content, { opacity: fadeAnim, transform: [{ translateY: slideAnim }] }]}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <LinearGradient colors={['#0863a7', '#074393']} style={styles.header}>
          <View style={styles.headerContent}>
            <Text style={styles.headerTitle}>–ö–∞—Ç–∞–ª–æ–≥ –æ–±—Ä–∞—â–µ–Ω–∏–π</Text>
            
            <TouchableOpacity 
              style={styles.searchButton}
              onPress={() => setShowSearch(!showSearch)}
            >
              {LocalIcons.search({ size: 24, color: "#ffffff" })}
            </TouchableOpacity>
          </View>
        </LinearGradient>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <View style={styles.statsContainer}>
          <View style={styles.statItem}>
            <LinearGradient colors={['#22ae2c', '#5cc72f']} style={styles.statIcon}>
              {LocalIcons.document ? LocalIcons.document({ size: 24, color: "#ffffff" }) : 
                <Text style={{ color: "#ffffff", fontSize: 20 }}>üìÑ</Text>
              }
            </LinearGradient>
            <Text style={styles.statNumber}>{requests.length}</Text>
            <Text style={styles.statLabel}>–û–±—Ä–∞—â–µ–Ω–∏–π</Text>
          </View>
          
          <View style={styles.statItem}>
            <LinearGradient colors={['#60caac', '#9ad0e7']} style={styles.statIcon}>
              {LocalIcons.analytics ? LocalIcons.analytics({ size: 24, color: "#ffffff" }) : 
                <Text style={{ color: "#ffffff", fontSize: 20 }}>üìä</Text>
              }
            </LinearGradient>
            <Text style={styles.statNumber}>{requests.length}</Text>
            <Text style={styles.statLabel}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</Text>
          </View>
          
          <View style={styles.statItem}>
            <LinearGradient colors={['#ff6b35', '#ff8c42']} style={styles.statIcon}>
              {LocalIcons.medical ? LocalIcons.medical({ size: 24, color: "#ffffff" }) : 
                <Text style={{ color: "#ffffff", fontSize: 20 }}>üè•</Text>
              }
            </LinearGradient>
            <Text style={styles.statNumber}>12</Text>
            <Text style={styles.statLabel}>–ó–∞–ø–∏—Å–µ–π</Text>
          </View>
        </View>

        {/* –ü–æ–∏—Å–∫ */}
        {showSearch && (
          <View style={styles.searchContainer}>
            <View style={styles.searchInputWrapper}>
              {LocalIcons.search({ size: 20, color: "#0863a7" })}
              <TextInput
                style={styles.searchInput}
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º..."
                placeholderTextColor="#9ad0e7"
                value={searchQuery}
                onChangeText={setSearchQuery}
              />
              {searchQuery.length > 0 && (
                <TouchableOpacity onPress={() => setSearchQuery('')}>
                  {LocalIcons.close({ size: 20, color: "#0863a7" })}
                </TouchableOpacity>
              )}
            </View>
          </View>
        )}

        {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º */}
        <View style={styles.filtersContainer}>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            {dateFilters.map((filter) => (
              <TouchableOpacity
                key={filter.id}
                style={[
                  styles.filterButton,
                  selectedDateFilter === filter.id && styles.filterButtonActive
                ]}
                onPress={() => setSelectedDateFilter(filter.id)}
              >
                <Text style={[
                  styles.filterButtonText,
                  selectedDateFilter === filter.id && styles.filterButtonTextActive
                ]}>
                  {filter.name}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π */}
        <ScrollView style={styles.requestsList} showsVerticalScrollIndicator={false}>
          {filteredRequests.length > 0 ? (
            filteredRequests.map(renderRequestCard)
          ) : (
            <View style={styles.emptyState}>
              <Text style={styles.emptyStateText}>–û–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
            </View>
          )}
        </ScrollView>
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  content: {
    flex: 1,
  },
  header: {
    paddingTop: 60,
    paddingBottom: 20,
    paddingHorizontal: 20,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  headerTitle: {
    fontSize: 20,
    fontFamily: 'Open Sauce',
    fontWeight: 'bold',
    color: '#ffffff',
    flex: 1,
  },
  searchButton: {
    padding: 5,
  },
  searchContainer: {
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  searchInputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 15,
    paddingHorizontal: 15,
    paddingVertical: 12,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Open Sauce',
    color: '#333333',
    marginLeft: 10,
  },
  filtersContainer: {
    paddingHorizontal: 20,
    paddingVertical: 15,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  filterButton: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    backgroundColor: '#f8f9fa',
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  filterButtonActive: {
    backgroundColor: '#0863a7',
    borderColor: '#0863a7',
  },
  filterButtonText: {
    fontSize: 14,
    fontFamily: 'Open Sauce',
    color: '#333333',
    fontWeight: '500',
  },
  filterButtonTextActive: {
    color: '#ffffff',
    fontWeight: '600',
  },
  requestsList: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  requestCard: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    marginBottom: 20,
    padding: 20,
    shadowColor: '#013e61',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 6,
  },
  requestHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 15,
  },
  requestInfo: {
    flex: 1,
  },
  requestDate: {
    fontSize: 14,
    fontFamily: 'Open Sauce',
    color: '#666666',
    marginBottom: 5,
  },
  categoryContainer: {
    alignSelf: 'flex-start',
  },
  categoryBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  categoryText: {
    fontSize: 12,
    fontFamily: 'Open Sauce',
    color: '#ffffff',
    fontWeight: '600',
  },
  statusContainer: {
    marginLeft: 10,
  },
  statusDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#22ae2c',
  },
  requestContent: {
    marginBottom: 15,
  },
  requestTitle: {
    fontSize: 16,
    fontFamily: 'Open Sauce',
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 5,
    marginTop: 10,
  },
  requestQuery: {
    fontSize: 14,
    fontFamily: 'Open Sauce',
    color: '#666666',
    lineHeight: 20,
  },
  aiResponse: {
    fontSize: 14,
    fontFamily: 'Open Sauce',
    color: '#0863a7',
    lineHeight: 20,
  },
  symptomsContainer: {
    marginTop: 15,
  },
  symptomsTitle: {
    fontSize: 14,
    fontFamily: 'Open Sauce',
    fontWeight: '600',
    color: '#333333',
    marginBottom: 8,
  },
  symptomsList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  symptomTag: {
    backgroundColor: '#f0f8ff',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  symptomText: {
    fontSize: 12,
    fontFamily: 'Open Sauce',
    color: '#0863a7',
  },
  requestFooter: {
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    paddingTop: 15,
  },
  viewDetailsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  viewDetailsText: {
    fontSize: 14,
    fontFamily: 'Open Sauce',
    color: '#0863a7',
    fontWeight: '600',
    marginRight: 5,
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 50,
  },
  emptyStateText: {
    fontSize: 16,
    fontFamily: 'Open Sauce',
    color: '#666666',
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: '#ffffff',
    marginHorizontal: 20,
    marginTop: 15,
    marginBottom: 10,
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
  },
  statIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 10,
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    fontFamily: 'Open Sauce',
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
    fontFamily: 'Open Sauce',
    marginTop: 2,
  },
});


